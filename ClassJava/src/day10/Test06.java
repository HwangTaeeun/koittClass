package day10;

public class Test06 {
/*
	Interface (인터페이스)
		: 	클래스의 한 종류이긴하지만
			그 형태나 의미가 지금까지 사용했던 클래스들과는 다른
			특수한 클래스의 일종
			
			1. 최상위 클래스가 Object 가 아니다.
				==> 인터페이스는 다른 클래스를 상속 받아서 
					만들어진 클래스가 아니다.
					
			2. 인터페이스 안에는 100% 추상함수가 존재해야 한다.
				==> 원칙적으로 일반함수는 존재하면 안되는데
					경우에 따라서는 일반함수(함수의 기능이 존재하는 함수)가
					존재하는 경우에는 앞에 default 를 붙여줘야 한다.
					
					따라서 
					인터페이스 내의 함수는 자동적으로
					public abstract 가 붙게 된다.
					
			3. 인터페이스는 다른 클래스에 상속해줄 수 있는데
				다중 상속이 가능하다.
			
			*
			4. 변수는 가질수 있다.
				이때 변수는 자동적으로
					public static final 
				이 붙게 된다.
			
	만드는 방법]
		
		[접근지정자] interface 인터페이스이름 {
			변수
			추상함수
		}
		
	왜???
		==> 다형성 구현 때문에...
		
		
	*****
	인터페이스 역시 스스로 new 시킬수 없다.
	상속을 해주고 하위 클래스의 인스턴스를 받는 방법으로 사용해야 하겠다.
	
	
	***
	클래스의 경우는 기능을 복사해 올때 상속 받는다 라고 표현 하지만
	인터페이스의 경우는 몸체가 없는 함수의 기능을 제작을 하게 되므로
	[ 구현한다 ] 라고 표현한다.
	
	
	인터페이스 구현방법]
		
		public class 클래스이름 
				extends 상속받아올클래스이름 
				imlements 인터페이스1, 인터페이스2, ... {
			
			인터페이스가 가진 함수{
				처리내용
			}
			....
			
			***
			구현할 인터페이스내의 모든 추상함수는 몸체를 만들어야 한다.
			(함수를 완성해야 한다.)
			
		}
		
	***
	클래스의 상속과 같이 구현이 되어야 한다면
	extends 가 먼저오고 implements 가 나중에 와야 한다.
	
	
참고]
	
	인터페이스도 상속이 가능하다.
		 형식]
		 	
		 	public interface 이름 extends 상속해줄인터페이스이름 {
		 	
		 	}
		 	
참고]
	인터페이스 내에 일반함수(몸체가 있는 함수)가 올 수도 있지만
	이 경우 반드시 default 를 붙여준다.
	
	형식]
		default 반환값 함수이름(){ 내용 }
					
 */
	public Test06() {
		
	}

	public static void main(String[] args) {
		new Test06();
	}

}
