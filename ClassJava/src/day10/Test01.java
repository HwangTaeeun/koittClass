package day10;


// static import
import static java.lang.Math.*;

public class Test01 {

/*
	패키지(Package)
		: 	간결히 표현하자면 자바로 만든 프로그램 소스가 들어있는 폴더
			
			자바는 오픈소스로 개발이됬다.
			모든 사람들이 자신이 만든 프로그램을 제공할 수 있고
			다른 사람들의 프로그램 제공 받을 수도 있다.
			그러다보니 문제점이 도출이 됬는데
				클래스이름이 충돌이 날 수 있다.
			이런 문제점을 해결하기 위할 해결책으로 제신된것이 
				패키지이다.
				
			즉, 소스를 만드는 사람이 
			그 프로그램이 포함되는 폴더이름까지 정해서 프로그램을 만들도록 한 것.
			
			자바로 프로그램을 만들 때는 반드시 해당 프로그램이 어떤 폴더에 저장이 되는지
			알려주도록 해 놓았다.
				
				==> package 폴더이름;
				
			참고]
				패키지 이름을 만드는 권장사항
				==>
					자신이 사용하는 도메인을 거꾸로 쓴 후 
					그 다음에 다시 폴더이름을 붙여라.
					
					예]
						www.class01.org
						==> org.class01.www.songlim.Park.java
---------------------------------------------------------------------------------------------
	*****
	java.lang 패키지
		유일하게 이 패키지는 import 시키지 않아도 사용할 수 있다.
		<== JVM이 기본적으로 찾아보는 패키지이기 때문...
			이 패키지 안에 있는 클래스들은 
			프로그램을 제작을 할 때 필수적으로 사용해야 되는 클래스들이기 때문에...
			
						
	==========================================================================
	
	import
	==> 자신이 사용할 클래스가 어느 폴더(패키지)에 소속된 클래스인지를
		명확히 밝혀주기 위한 명령
		
		예]
			내가
				Test.class
			Sample 폴더에 저장하고
			
				Test.class
			Test 폴더에 저장을 했다면
			
		형식 1]
				import 패키지경로.클래스이름;
				==> 지정한 경로에 있는 지정한 클래스를 사용할 예정임을 밝힌것.
				
				import Sample.Test;
				
		형식 2]
				import 패키지경로.*;
				==> 지정한경로아래의 모든 클래스를 사용할 예정임을 밝힌 것.
				
				import Sample.*;
				==> Sample 폴더에 있는 모든 클래스를 사용할 예정임을 밝힌 것.
				
		주의 ] 
				import 할 때 해당 폴더아래의 클래스만 임포트 된다.
				하위 폴더 아래있는 클래스를 임포트 되지 않는다.
				
		참고]
			형식 2번보다는 형식 1번이 우선시 된다.
			
		참고]
			임포트하지 않아도 클래스이름 앞에 패키지이름을 붙여서 사용할 수도 있다.
			
			
---------------------------------------------------------------------------------------------
	static import 
		==> static 멤버는 원칙적으로 
				클래스이름.멤버이름
			의 형식으로 접근한다.
			
			이때 static 멤버 앞에 사용하는 클래스이름 조차도 생략할 수 있다.
			==> 그 방법이 static import
			
		형식]
			import static 패키지이름.클래스이름.*;
			
 */
	public Test01() {
		// 패키지를 임포트하지 않고 사용하는 방법
		day09.Ex01 e1 = new day09.Ex01();
		
		// static 멤버 호출
		System.out.println(PI);
		System.out.println((int)(random() * 10) + 1);
	}
	
	public static void main(String[] args) {
		new Test01();
	}

}
